import cv2
import math
import numpy as np
import copy as cp

def crop_img(file,no_info_point):
    img_rbg = cv2.imread(file)
    img_grey_org = cv2.cvtColor(img_rbg,cv2.COLOR_BGR2GRAY)
    img_grey = cp.copy(img_grey_org)
    img_grey[np.where(img_grey < no_info_point)] = 0

    img = cp.copy(img_grey)
    # remove white tag
    def remove_white_label(img):
        for col_i in range(img.shape[1]):
            top10_row_val = [img.item(x,col_i) for x in range(10)]
            if any(x == 255 for x in top10_row_val):
                end_col = col_i+1
            else:
                break
        for row_i in range(end_col):
            top10_col_val = [img.item(row_i,x) for x in range(10)]
            if any(x == 255 for x in top10_col_val):
                end_row = row_i+1
            else:
                break

        img[:end_row,:end_col] = 0
        return img

    # image rotation using Hough transform over Canny image
    def rotate_vertical_img(img):
        img_rows, img_cols = img.shape
        canny_img = cv2.Canny(img, 50, 150, apertureSize=3)
        lines = cv2.HoughLines(canny_img, 1, np.pi / 180, 400)
        avr_theta = 0
        cnt_theta = 0

        for line in lines:
            for rho, theta in line:
                if abs(theta) < math.pi / 4:
                    cnt_theta += 1
                    avr_theta += (theta - avr_theta) / cnt_theta

        M = cv2.getRotationMatrix2D((img_cols / 2, img_rows / 2), math.degrees(avr_theta), 1)
        return cv2.warpAffine(img, M, (img_cols, img_rows))

    def cosine(a,b):
        ee = 1*10**-8
        return (np.dot(a,b)+ee)/((np.linalg.norm(a)*np.linalg.norm(b))+ee)

    def find_start_end_points(cos_vals):
        for i in range(len(cos_vals)-5):
            if all(np.array([cos_vals[i+j] for j in range(5)]) < 1):
                start_point = i
                break

        for i in range(len(cos_vals)-1,-1,-1):
            if all(np.array([cos_vals[i-j] for j in range(5)]) < 1):
                end_point = i-4
                break
        return start_point,end_point

    img = remove_white_label(img)
    img = rotate_vertical_img(img)
    img = cv2.GaussianBlur(img, (15, 15), 0) # smoothen
    img = cv2.Canny(img, 5, 100) #detect edges

    cos_vals = np.array([])
    for i in range(img.shape[1]-1):
        x = cosine(img[:,i],img[:,i+1])
        cos_vals = np.append(cos_vals,(x))
    col_start,col_end = find_start_end_points(cos_vals)

    cos_vals = np.array([])
    for i in range(img.shape[0]-1):
        x = cosine(img[i,:],img[i+1,:])
        cos_vals = np.append(cos_vals,(x))
    row_start,row_end = find_start_end_points(cos_vals)

    return rotate_vertical_img(img_grey_org)[row_start:row_end,col_start:col_end]
